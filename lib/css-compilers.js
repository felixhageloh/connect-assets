// Generated by CoffeeScript 1.3.3
(function() {
  var libs, path;

  path = require('path');

  libs = {};

  exports.addPlugin = function(name, plugin) {
    return libs[name] = plugin;
  };

  exports.styl = {
    optionsMap: {},
    compileSync: function(sourcePath, source) {
      var callback, options, result, _base, _ref;
      result = '';
      callback = function(err, js) {
        if (err) {
          throw err;
        }
        return result = js;
      };
      libs.stylus || (libs.stylus = require('stylus'));
      libs.bootstrap || (libs.bootstrap = (function() {
        try {
          return require('bootstrap-stylus');
        } catch (e) {
          return function() {
            return function() {};
          };
        }
      })());
      libs.nib || (libs.nib = (function() {
        try {
          return require('nib');
        } catch (e) {
          return function() {
            return function() {};
          };
        }
      })());
      libs.bootstrap || (libs.bootstrap = (function() {
        try {
          return require('bootstrap-stylus');
        } catch (e) {
          return function() {
            return function() {};
          };
        }
      })());
      options = (_ref = (_base = this.optionsMap)[sourcePath]) != null ? _ref : _base[sourcePath] = {
        filename: sourcePath
      };
      libs.stylus(source, options).use(libs.bootstrap()).use(libs.nib()).use(libs.bootstrap()).use(libs.stylusExtends).set('compress', this.compress).set('include css', true).render(callback);
      return result;
    }
  };

  exports.less = {
    optionsMap: {
      optimization: 1,
      silent: false,
      paths: [],
      color: true
    },
    compileSync: function(sourcePath, source) {
      var callback, compress, options, result, _ref;
      result = "";
      libs.less || (libs.less = require('less'));
      options = this.optionsMap;
      options.filename = sourcePath;
      options.paths = [path.dirname(sourcePath)].concat(options.paths);
      options.syncImport = true;
      compress = (_ref = this.compress) != null ? _ref : false;
      callback = function(err, tree) {
        if (err) {
          throw err;
        }
        return result = tree.toCSS({
          compress: compress
        });
      };
      new libs.less.Parser(options).parse(source, callback);
      return result;
    }
  };

}).call(this);
